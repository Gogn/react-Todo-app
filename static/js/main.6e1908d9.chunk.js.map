{"version":3,"sources":["components/navbar.js","components/todo.js","pages/Home.js","pages/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","src","width","alt","style","display","color","exact","to","Todo","styles","textDecoration","props","todo","done","type","checked","this","onClick","doneTodo","id","name","deleteTodo","Component","Home","Todos","state","todos","todoNew","addTodoHandler","event","setState","target","value","addTodo","preventDefault","new_todos","map","concat","splice","console","log","key","onSubmit","placeholder","onChange","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e1908d9.chunk.js","sourcesContent":["import React from 'react'\nimport {NavLink} from \"react-router-dom\";\n\nexport const Navbar = () => (\n  <nav className='navbar navbar-dark bg-primary navbar-expand'>\n    <div className=\"navbar-brand\">\n      <img src='favicon.ico' width=\"30\" alt=\"React\" className='d-inline-block align-top mr-3' />\n      <NavLink style={{display: 'inline', color: '#fff'}} exact to=\"/\" className='nav-link'>Todo app. Local state version.</NavLink>\n    </div>\n    <ul className='navbar-nav ml-auto'>\n      <li className='nav-item'>\n        <strong><NavLink exact to=\"/\" className='nav-link'>Home</NavLink></strong>\n      </li>\n      <li>\n        <strong><NavLink to=\"/todo\" className='nav-link'>Todos</NavLink></strong>\n      </li>\n    </ul>\n  </nav>\n)","import React, {Component} from 'react'\n\nexport default class Todo extends Component {\n\n  styles = () => {\n    return {\n      textDecoration: this.props.todo.done ? 'line-through' : 'none'\n    }\n  }\n\n  render() {\n    return (\n      <li className=\"list-group-item\">\n        <div className=\"input-group\">\n          <div className=\"input-group-prepend\">\n            <div className=\"input-group-text\">\n              <input\n                type=\"checkbox\"\n                checked={this.props.todo.done}\n                onClick={() => this.props.doneTodo(this.props.todo.id)}\n              />\n            </div>\n          </div>\n          <div className='flex-grow-1' style={this.styles()}>\n            <span\n              type=\"text\"\n              className=\"form-control\"\n              onClick={() => this.props.doneTodo(this.props.todo.id)}>{this.props.todo.name}\n            </span>\n          </div>\n          <button\n            className='btn btn-danger'\n            onClick={() => this.props.deleteTodo(this.props.todo.id)}\n          >X\n          </button>\n        </div>\n      </li>\n    )\n  }\n}","import React from 'react'\nimport Todo from \"../components/todo\";\n\nexport const Home = () => {\n\n  function text(text) {\n    return text\n  }\n\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='col'>\n          <h1>Home</h1>\n          <h5 className='mb-4'>This is react app example that using just local state to store data.</h5>\n          <h4>How it works?</h4>\n          <details>\n            <summary>Project tree</summary>\n            <p className='mb-0'>.</p>\n            <p className='mb-0'>├── App.js</p>\n            <p className='mb-0'>├── components</p>\n            <p className='mb-0'>│   ├── navbar.js</p>\n            <p className='mb-0'>│   └── todo.js</p>\n            <p className='mb-0'>├── index.css</p>\n            <p className='mb-0'>├── index.js</p>\n            <p className='mb-0'>├── pages</p>\n            <p className='mb-0'>│   ├── Home.js</p>\n            <p className='mb-0'>│   └── Todos.js</p>\n            <p className='mb-0'>└── serviceWorker.js</p>\n          </details>\n\n          <article>\n            <p className='mt-2' >First of all, the main page is <strong>index.html</strong>. They have a {text('<div id=”root”></div>')} </p>\n            <p>A rendered JSX from <strong>index.js</strong> will be inserted to this block. <strong>index.js</strong> includes code from <strong>App.js</strong> component.</p>\n            <p><strong>App.js</strong> uses <i>react-router-dom</i> that uses <i>React Router</i> to bind DOM.</p>\n            <p><i>React Router</i> dynamically render component <strong>pages/Home</strong> where you are now. <i>(so the entire app doesn't reloading  when a link is opens, only necessary elements refreshing)</i></p>\n            <p><strong>Home.js</strong> component uses <strong>components/navbar.js</strong> to add navigation bar on the top of the app.</p>\n            <p>The <strong>pages/Todos.js</strong> component placed on the /todo path, that can be reached by clicking to the link on the top right corner on navbar.</p>\n            <hr/>\n\n            <h5>The Local state</h5>\n            <p><strong>Todos.js</strong> have a <i>local state</i> that have a array of objects.</p>\n            <p><strong>Todos.js</strong> include list of todos from <strong>components/todo.js</strong> by mapping state.todos: {text('this.state.todos.map((todo, id) => ( ... )')},\n              so every todo object from state.todos array will be shown from <strong>components/todo.js </strong>\n              with parameters: {text('todo={todo}, key={id}, doneTodo={this.doneTodo}, deleteTodo={event => this.deleteTodo(id)}')}</p>\n            <ul>\n              <li><i>todo</i> - is the current state.todos[] object from <i>map</i> method</li>\n              <li><i>key</i> - is necessary parameter for the <i>map</i> method</li>\n              <li><i>doneTodo</i> - is the function for update state.todos.done parameter</li>\n              <li><i>deleteTodo</i> - is the function to delete todo object from state.todos array</li>\n            </ul>\n            <p>So when you clicking on the todo element or delete button the <strong>components/todo.js</strong>\n              calling function from props and action from <strong>pages/Todos.js</strong> is triggered</p>\n            <p><strong>pages/Todos.js</strong> also have the input that triggered <i>addTodo</i> function that update state.todos.todoNew.\n              After state.todos.todoNew was updated, new todo can be stored by clicking on \"Add todo\" button, that triggered <i>addTodo</i> function and update the state.</p>\n            <hr/>\n\n            <h5>Manegement state via Redux</h5>\n            The Redux implementation of this app placed here: https://github.com/Gogn/react-Todo-app_Redux\n            <hr/>\n\n            <h5>Use hooks</h5>\n            Version that uses Hooks state management app placed here:\n\n\n          </article>\n\n          </div>\n      </div>\n    </div>\n  )\n\n}","import React, {Component} from 'react'\nimport Todo from \"../components/todo\";\n\nexport default class Todos extends Component {\n\n  state = {\n    todos: [\n      {name: 'First', done: false, id: 0},\n      {name: 'Second', done: false, id: 1},\n      {name: 'Third', done: false, id: 2},\n    ],\n    todoNew: {name: '', done: false}\n  }\n\n  addTodoHandler = (event) => {\n    this.setState({\n      todoNew: {name: event.target.value, done: false}\n    })\n  }\n\n  addTodo = (event) => {\n    event.preventDefault()\n    this.setState({todos: [...this.state.todos, this.state.todoNew]})\n  }\n\n  doneTodo = (id) => {\n    this.setState({\n      new_todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.done = !todo.done\n        }\n        return todo\n      })\n    })\n  }\n\n  deleteTodo = (id) => {\n    const new_todos = this.state.todos.concat()\n    new_todos.splice(id, 1)\n    console.log(new_todos)\n    this.setState({todos: new_todos})\n  }\n\n  render() {\n    return (\n      <>\n        <div className='row'>\n          <div className=\"col text-center\">\n            <h1 className='mb-4'>Todo list</h1>\n          </div>\n        </div>\n\n        <div className='row justify-content-center'>\n          <div className=\"col-8\">\n            <ul className=\"list-group mb-4\">\n              {this.state.todos.map((todo, id) => (\n                <Todo\n                  todo={todo}\n                  key={id}\n                  doneTodo={this.doneTodo}\n                  deleteTodo={event => this.deleteTodo(id)}\n                />\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <form className='row justify-content-center' onSubmit={this.addTodo}>\n            <div className=\"col-10 input-group mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Describe what you want to do\"\n                onChange={this.addTodoHandler}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-outline-success\"\n                  type=\"submit\"\n                  onChange={this.addTodo}\n                >Add todo\n                </button>\n              </div>\n            </div>\n        </form>\n      </>\n    )\n  }\n}\n","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport {Navbar} from \"./components/navbar\";\nimport {Home} from \"./pages/Home\";\nimport Todos from \"./pages/Todos\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/react-Todo-app\">\n      <Navbar/>\n      <div className=\"container pt-4\">\n        <Switch>\n          <Route path='/' exact component={Home}/>\n          <Route path='/todo' component={Todos}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}